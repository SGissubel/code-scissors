{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { activate, ensureInitialized, fetchConfig, fetchAndActivate, getAll, getBoolean, getNumber, getString, getValue, setLogLevel, isSupported } from '@firebase/remote-config';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass RemoteConfigCompatImpl {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  get defaultConfig() {\n    return this._delegate.defaultConfig;\n  }\n\n  set defaultConfig(value) {\n    this._delegate.defaultConfig = value;\n  }\n\n  get fetchTimeMillis() {\n    return this._delegate.fetchTimeMillis;\n  }\n\n  get lastFetchStatus() {\n    return this._delegate.lastFetchStatus;\n  }\n\n  get settings() {\n    return this._delegate.settings;\n  }\n\n  set settings(value) {\n    this._delegate.settings = value;\n  }\n\n  activate() {\n    return activate(this._delegate);\n  }\n\n  ensureInitialized() {\n    return ensureInitialized(this._delegate);\n  }\n  /**\r\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\r\n   * {@link Settings.fetchTimeoutInSeconds} or\r\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\r\n   */\n\n\n  fetch() {\n    return fetchConfig(this._delegate);\n  }\n\n  fetchAndActivate() {\n    return fetchAndActivate(this._delegate);\n  }\n\n  getAll() {\n    return getAll(this._delegate);\n  }\n\n  getBoolean(key) {\n    return getBoolean(this._delegate, key);\n  }\n\n  getNumber(key) {\n    return getNumber(this._delegate, key);\n  }\n\n  getString(key) {\n    return getString(this._delegate, key);\n  }\n\n  getValue(key) {\n    return getValue(this._delegate, key);\n  } // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n\n\n  setLogLevel(logLevel) {\n    setLogLevel(this._delegate, logLevel);\n  }\n\n}\n\nconst name = \"@firebase/remote-config-compat\";\nconst version = \"0.1.12\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction registerRemoteConfigCompat(firebaseInstance) {\n  firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig-compat', remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true).setServiceProps({\n    isSupported\n  }));\n  firebaseInstance.registerVersion(name, version);\n}\n\nfunction remoteConfigFactory(container, {\n  instanceIdentifier: namespace\n}) {\n  const app = container.getProvider('app-compat').getImmediate(); // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase); //# sourceMappingURL=index.esm2017.js.map","map":null,"metadata":{},"sourceType":"module"}