{"ast":null,"code":"import { serverTimestamp } from 'firebase/firestore';\nimport { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../login/auth.service\";\nexport let SnippetsService = /*#__PURE__*/(() => {\n  class SnippetsService {\n    constructor(db, router, authService) {\n      this.db = db;\n      this.router = router;\n      this.authService = authService;\n      this.snippetsAdded = new BehaviorSubject(null);\n      this.snippetsExist = new BehaviorSubject(null);\n      this.snippetsAll = [];\n      this.userID = this.authService.getUserID();\n    }\n\n    fetchAvailableSnippets() {}\n\n    createdNewSnippet(snippet) {\n      this.storeNewSnippet(snippet);\n    }\n\n    fetchCreatedSnippets() {\n      this.snippetsAll = [];\n      this.db.collection('snippets').doc(this.userID).collection('user-snippets').snapshotChanges().pipe(map(results => {\n        return results.map(snippet => {\n          return {\n            id: snippet.payload.doc.id,\n            name: snippet.payload.doc.data().name,\n            code: snippet.payload.doc.data().code,\n            other_tags: snippet.payload.doc.data().other_tags,\n            created_at: snippet.payload.doc.data().created_at,\n            language: snippet.payload.doc.data().language,\n            isprivate: snippet.payload.doc.data().private,\n            favorite: snippet.payload.doc.data().favorite\n          };\n        });\n      })).subscribe(result => {\n        this.snippetsAll.push(result);\n\n        if (result) {\n          this.snippetsExist.next(true);\n        }\n\n        this.setSnippetsAdded();\n      });\n    }\n\n    getSnippetsExist() {\n      return this.snippetsExist.asObservable();\n    }\n\n    setSnippetsAdded() {\n      this.snippetsAdded.next(this.snippetsAll);\n    }\n\n    getSnippetsAdded() {\n      return this.snippetsAdded.asObservable();\n    }\n\n    updateSnippet(snippet) {\n      const selectedSnip = snippet.id;\n      this.db.doc(`snippets/${this.userID}/user-snippets/${selectedSnip}`).update(snippet);\n      this.returnToDash();\n    }\n\n    deleteSnippet(snippet) {\n      const that = this;\n      this.db.collection('snippets').doc(this.userID).collection('user-snippets').doc(snippet.id).delete().then(function () {\n        that.fetchCreatedSnippets();\n        console.log(\"Document successfully deleted!\");\n      }).catch(function (error) {\n        console.error(\"Error removing document: \", error);\n      });\n    }\n\n    storeNewSnippet(snippet) {\n      const itemId = this.db.createId();\n      const createdAt = serverTimestamp();\n      const item = Object.assign(Object.assign({}, snippet), {\n        id: itemId,\n        created_at: createdAt\n      });\n      this.db.collection('snippets').doc(this.userID).collection('user-snippets').add(item);\n\n      if (!snippet.private) {\n        this.storePublicSnippet(snippet);\n      } else {\n        this.returnToDash();\n      }\n    }\n\n    storePublicSnippet(snippet) {\n      this.db.collection('snippets').doc('public_snippets').collection('snippets').add(snippet);\n      this.returnToDash();\n    }\n\n    returnToDash() {\n      this.router.navigate(['dashboard']);\n    }\n\n  }\n\n  SnippetsService.ɵfac = function SnippetsService_Factory(t) {\n    return new (t || SnippetsService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuthService));\n  };\n\n  SnippetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SnippetsService,\n    factory: SnippetsService.ɵfac,\n    providedIn: 'root'\n  });\n  return SnippetsService;\n})();","map":null,"metadata":{},"sourceType":"module"}